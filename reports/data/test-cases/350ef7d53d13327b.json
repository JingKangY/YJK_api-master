{
  "uid" : "350ef7d53d13327b",
  "name" : "login_01测试成功登录",
  "fullName" : "testcase.test_login.TestLogin#test_login",
  "historyId" : "44ac8fa337211358b29fcaf04453b171",
  "time" : {
    "start" : 1661419468861,
    "stop" : 1661419469388,
    "duration" : 527
  },
  "description" : "测试成功登录",
  "descriptionHtml" : "<p>测试成功登录</p>/n",
  "status" : "failed",
  "statusMessage" : "AssertionError",
  "statusTrace" : "self = <test_login.TestLogin object at 0x000002C805099BB0>/ncase_info = ['login_01', '测试成功登录', '/apitest/login/', 'post', 'data', /"{'username':'test01','password':'123456'}/", ...]/nconnect_database = <commons.mysql.ConnectMysql object at 0x000002C87D873EB0>/ntest_login_clear = None/n/n    @allure.step('1、正确输入接口地址 2、正确输入请求参数 3、查看响应body是否正确')/n    @pytest.mark.parametrize(/"case_info/",/n                             read.read_special_list_excel('../data/api_login1.xlsx', 'login', [1, 2, 3, 4, 5, 8, 13],/n                                                          '登录login'))/n    # 用例编号1, 用例描述2, 接口路径3, 请求方法4, 请求类型5, 参数8, 预期结果13/n    def test_login(self, case_info, connect_database, test_login_clear):  # 登录接口测试函数(自动化测试用例)，login.xlsx叫手工测试用例或者测试数据/n        number, desc, url, method, res_type, args, expect = case_info/n        allure.dynamic.title(number + desc)  # 用例的标题/n        allure.dynamic.description(desc)  # 用例的内容/n        url = str(get_server_formal()) + url  # 组合url/n        datas = {/n            /"url/": url,/n            /"method/": method,/n            'data': eval(args)/n        }/n        res_actual = RequestStart().send_request(**datas)/n>       ResponseAssert().asserts(eval(expect), res_actual)/n/n..//testcase//test_login.py:37: /n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _/n..//commons//asserts.py:24: in asserts/n    raise e/n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _/n/nself = <commons.asserts.ResponseAssert object at 0x000002C805228DC0>/nexpect = {'Message': '登录验证成', 'Result': 'Usercheck ok', 'Status': 1000}/nres_actual = {'Message': '登录验证成功', 'Result': 'Usercheck ok', 'Status': 1000}/n/n    @allure.step(/"step：响应断言/")/n    def asserts(self, expect, res_actual):  # 比对断言结果，参数：expect，actual 结果：断言是否通过/n        '''/n        :param expect: 预期结果/n        :param res_actual: 实际结果/n        :return: 用例是否通过/n        '''/n        try:/n            log.debug(f'Response实际结果为：{res_actual}')/n            log.debug(f'Response预期结果为：{expect}')/n>           assert str(res_actual) == str(expect)  # 成立返回TURE，失败返回FALSE/nE           AssertionError/n/n..//commons//asserts.py:19: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 2,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "base_url",
    "time" : {
      "start" : 1661419463512,
      "stop" : 1661419463512,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "_verify_url",
    "time" : {
      "start" : 1661419463513,
      "stop" : 1661419463513,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "connect_database",
    "time" : {
      "start" : 1661419463513,
      "stop" : 1661419463530,
      "duration" : 17
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "test_login_clear",
    "time" : {
      "start" : 1661419463530,
      "stop" : 1661419463585,
      "duration" : 55
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "测试成功登录",
    "status" : "failed",
    "statusMessage" : "AssertionError",
    "statusTrace" : "self = <test_login.TestLogin object at 0x000002C805099BB0>/ncase_info = ['login_01', '测试成功登录', '/apitest/login/', 'post', 'data', /"{'username':'test01','password':'123456'}/", ...]/nconnect_database = <commons.mysql.ConnectMysql object at 0x000002C87D873EB0>/ntest_login_clear = None/n/n    @allure.step('1、正确输入接口地址 2、正确输入请求参数 3、查看响应body是否正确')/n    @pytest.mark.parametrize(/"case_info/",/n                             read.read_special_list_excel('../data/api_login1.xlsx', 'login', [1, 2, 3, 4, 5, 8, 13],/n                                                          '登录login'))/n    # 用例编号1, 用例描述2, 接口路径3, 请求方法4, 请求类型5, 参数8, 预期结果13/n    def test_login(self, case_info, connect_database, test_login_clear):  # 登录接口测试函数(自动化测试用例)，login.xlsx叫手工测试用例或者测试数据/n        number, desc, url, method, res_type, args, expect = case_info/n        allure.dynamic.title(number + desc)  # 用例的标题/n        allure.dynamic.description(desc)  # 用例的内容/n        url = str(get_server_formal()) + url  # 组合url/n        datas = {/n            /"url/": url,/n            /"method/": method,/n            'data': eval(args)/n        }/n        res_actual = RequestStart().send_request(**datas)/n>       ResponseAssert().asserts(eval(expect), res_actual)/n/n..//testcase//test_login.py:37: /n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _/n..//commons//asserts.py:24: in asserts/n    raise e/n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _/n/nself = <commons.asserts.ResponseAssert object at 0x000002C805228DC0>/nexpect = {'Message': '登录验证成', 'Result': 'Usercheck ok', 'Status': 1000}/nres_actual = {'Message': '登录验证成功', 'Result': 'Usercheck ok', 'Status': 1000}/n/n    @allure.step(/"step：响应断言/")/n    def asserts(self, expect, res_actual):  # 比对断言结果，参数：expect，actual 结果：断言是否通过/n        '''/n        :param expect: 预期结果/n        :param res_actual: 实际结果/n        :return: 用例是否通过/n        '''/n        try:/n            log.debug(f'Response实际结果为：{res_actual}')/n            log.debug(f'Response预期结果为：{expect}')/n>           assert str(res_actual) == str(expect)  # 成立返回TURE，失败返回FALSE/nE           AssertionError/n/n..//commons//asserts.py:19: AssertionError",
    "steps" : [ {
      "name" : "1、正确输入接口地址 2、正确输入请求参数 3、查看响应body是否正确",
      "time" : {
        "start" : 1661419468862,
        "stop" : 1661419469387,
        "duration" : 525
      },
      "status" : "failed",
      "statusMessage" : "AssertionError/n",
      "statusTrace" : "  File /"D://Python3.9.5//lib//site-packages//allure_commons//_allure.py/", line 172, in impl/n    return func(*a, **kw)/n  File /"D://PythonProjects//YJK_api//testcase//test_login.py/", line 37, in test_login/n    ResponseAssert().asserts(eval(expect), res_actual)/n  File /"D://Python3.9.5//lib//site-packages//allure_commons//_allure.py/", line 172, in impl/n    return func(*a, **kw)/n  File /"D://PythonProjects//YJK_api//commons//asserts.py/", line 24, in asserts/n    raise e/n  File /"D://PythonProjects//YJK_api//commons//asserts.py/", line 19, in asserts/n    assert str(res_actual) == str(expect)  # 成立返回TURE，失败返回FALSE/n",
      "steps" : [ {
        "name" : "step：响应断言",
        "time" : {
          "start" : 1661419469383,
          "stop" : 1661419469386,
          "duration" : 3
        },
        "status" : "failed",
        "statusMessage" : "AssertionError/n",
        "statusTrace" : "  File /"D://Python3.9.5//lib//site-packages//allure_commons//_allure.py/", line 172, in impl/n    return func(*a, **kw)/n  File /"D://PythonProjects//YJK_api//commons//asserts.py/", line 24, in asserts/n    raise e/n  File /"D://PythonProjects//YJK_api//commons//asserts.py/", line 19, in asserts/n    assert str(res_actual) == str(expect)  # 成立返回TURE，失败返回FALSE/n",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ {
          "name" : "expect",
          "value" : "{'Status': 1000, 'Result': 'Usercheck ok', 'Message': '登录验证成'}"
        }, {
          "name" : "res_actual",
          "value" : "{'Status': 1000, 'Result': 'Usercheck ok', 'Message': '登录验证成功'}"
        } ],
        "shouldDisplayMessage" : true,
        "attachmentsCount" : 0,
        "stepsCount" : 0,
        "hasContent" : true
      } ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "case_info",
        "value" : "['login_01', '测试成功登录', '/apitest/login/', 'post', 'data', /"{'username':'test01','password':'123456'}/", /"{'Status':1000,'Result':'Usercheck ok','Message':'登录验证成'}/"]"
      }, {
        "name" : "connect_database",
        "value" : "<commons.mysql.ConnectMysql object at 0x000002C87D873EB0>"
      }, {
        "name" : "test_login_clear",
        "value" : "None"
      } ],
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 0,
      "stepsCount" : 1,
      "hasContent" : true
    } ],
    "attachments" : [ {
      "uid" : "9040af38bcce7921",
      "name" : "log",
      "source" : "9040af38bcce7921.txt",
      "type" : "text/plain",
      "size" : 5232
    } ],
    "parameters" : [ ],
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 1,
    "stepsCount" : 2,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "connect_database::0",
    "time" : {
      "start" : 1661419475127,
      "stop" : 1661419475128,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "severity",
    "value" : "normal"
  }, {
    "name" : "feature",
    "value" : "接口测试项目"
  }, {
    "name" : "epic",
    "value" : "双创项目"
  }, {
    "name" : "story",
    "value" : "登录模块"
  }, {
    "name" : "tag",
    "value" : "run(order=1)"
  }, {
    "name" : "parentSuite",
    "value" : "testcase"
  }, {
    "name" : "suite",
    "value" : "test_login"
  }, {
    "name" : "subSuite",
    "value" : "TestLogin"
  }, {
    "name" : "host",
    "value" : "DESKTOP-2022XUI"
  }, {
    "name" : "thread",
    "value" : "7608-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "testcase.test_login"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "case_info",
    "value" : "['login_01', '测试成功登录', '/apitest/login/', 'post', 'data', /"{'username':'test01','password':'123456'}/", /"{'Status':1000,'Result':'Usercheck ok','Message':'登录验证成'}/"]"
  } ],
  "links" : [ {
    "name" : "缺陷标题测试",
    "url" : "缺陷标题测试",
    "type" : "issue"
  }, {
    "name" : "www.baidu.com",
    "url" : "www.baidu.com",
    "type" : "link"
  } ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "1dd692df833cfe77",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1661419466334,
        "stop" : 1661419466844,
        "duration" : 510
      }
    }, {
      "uid" : "dc53d12794148dcf",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1661419463587,
        "stop" : 1661419464118,
        "duration" : 531
      }
    } ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ "run(order=1)" ]
  },
  "source" : "350ef7d53d13327b.json",
  "parameterValues" : [ "['login_01', '测试成功登录', '/apitest/login/', 'post', 'data', /"{'username':'test01','password':'123456'}/", /"{'Status':1000,'Result':'Usercheck ok','Message':'登录验证成'}/"]" ]
}